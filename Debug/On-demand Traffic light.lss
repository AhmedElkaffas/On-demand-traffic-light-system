
On-demand Traffic light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000604  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000678  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  00000678  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000678  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013e4  00000000  00000000  0000081c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000995  00000000  00000000  00001c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d85  00000000  00000000  00002595  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000244  00000000  00000000  0000331c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000655  00000000  00000000  00003560  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a9f  00000000  00000000  00003bb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00004654  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 56 00 	jmp	0xac	; 0xac <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 c4 01 	call	0x388	; 0x388 <main>
  74:	0c 94 00 03 	jmp	0x600	; 0x600 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <vidTrafficLights>:
 * Output     : None
 * Author	  : Ahmed.Elsayed
 ********************************************/
void vidTrafficLights(void)
{
	checkFlag = 1;
  7c:	81 e0       	ldi	r24, 0x01	; 1
  7e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	vidLed_ON_5Sec(CARS_GREEN, PEDESTRIANS_RED);
  82:	65 e0       	ldi	r22, 0x05	; 5
  84:	70 e0       	ldi	r23, 0x00	; 0
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	0e 94 7d 01 	call	0x2fa	; 0x2fa <vidLed_ON_5Sec>
	checkFlag = 0;
  8e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	Led_Yellow_Blink_vi(CARS_YELLOW, PEDESTRIANS_YELLOW);	
  92:	64 e0       	ldi	r22, 0x04	; 4
  94:	70 e0       	ldi	r23, 0x00	; 0
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	0e 94 2d 01 	call	0x25a	; 0x25a <Led_Yellow_Blink_vi>
	vidLed_ON_5Sec(CARS_RED, PEDESTRIANS_GREEN);
  9e:	63 e0       	ldi	r22, 0x03	; 3
  a0:	70 e0       	ldi	r23, 0x00	; 0
  a2:	82 e0       	ldi	r24, 0x02	; 2
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 7d 01 	call	0x2fa	; 0x2fa <vidLed_ON_5Sec>
  aa:	08 95       	ret

000000ac <__vector_1>:
/********************************************
 * Description: Allow for the pedestrian to pass 
 * Author	  : Ahmed.Elsayed
 ********************************************/
ISR(INT0_vect)
{
  ac:	1f 92       	push	r1
  ae:	0f 92       	push	r0
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	0f 92       	push	r0
  b4:	11 24       	eor	r1, r1
  b6:	2f 93       	push	r18
  b8:	3f 93       	push	r19
  ba:	4f 93       	push	r20
  bc:	5f 93       	push	r21
  be:	6f 93       	push	r22
  c0:	7f 93       	push	r23
  c2:	8f 93       	push	r24
  c4:	9f 93       	push	r25
  c6:	af 93       	push	r26
  c8:	bf 93       	push	r27
  ca:	ef 93       	push	r30
  cc:	ff 93       	push	r31
	if (checkFlag == 1)
  ce:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d2:	81 30       	cpi	r24, 0x01	; 1
  d4:	51 f5       	brne	.+84     	; 0x12a <__vector_1+0x7e>
	{
		Led_OFF_vi(CARS_GREEN);
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <Led_OFF_vi>
		Led_OFF_vi(PEDESTRIANS_RED);
  de:	85 e0       	ldi	r24, 0x05	; 5
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <Led_OFF_vi>
		overflowCounter = 0;
		/*Timer0 stop*/
		TMR0_vidStopTimer();
  e6:	0e 94 f7 02 	call	0x5ee	; 0x5ee <TMR0_vidStopTimer>
		Clear_Bit(TIFR, 0);
  ea:	82 b7       	in	r24, 0x32	; 50
  ec:	8e 7f       	andi	r24, 0xFE	; 254
  ee:	82 bf       	out	0x32, r24	; 50
		Led_Yellow_Blink_vi(CARS_YELLOW, PEDESTRIANS_YELLOW);
  f0:	64 e0       	ldi	r22, 0x04	; 4
  f2:	70 e0       	ldi	r23, 0x00	; 0
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 2d 01 	call	0x25a	; 0x25a <Led_Yellow_Blink_vi>
		vidLed_ON_5Sec(CARS_RED, PEDESTRIANS_GREEN);
  fc:	63 e0       	ldi	r22, 0x03	; 3
  fe:	70 e0       	ldi	r23, 0x00	; 0
 100:	82 e0       	ldi	r24, 0x02	; 2
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 7d 01 	call	0x2fa	; 0x2fa <vidLed_ON_5Sec>
		TMR0_vidInit();
 108:	0e 94 b9 02 	call	0x572	; 0x572 <TMR0_vidInit>
		TMR0_vidSetTimer(0x00);
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	0e 94 cc 02 	call	0x598	; 0x598 <TMR0_vidSetTimer>
		Led_ON_vi(CARS_GREEN);
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 c5 00 	call	0x18a	; 0x18a <Led_ON_vi>
		Led_ON_vi(PEDESTRIANS_RED);
 11a:	85 e0       	ldi	r24, 0x05	; 5
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 c5 00 	call	0x18a	; 0x18a <Led_ON_vi>
		TMR0_vidStartTimer(1024);
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	94 e0       	ldi	r25, 0x04	; 4
 126:	0e 94 ce 02 	call	0x59c	; 0x59c <TMR0_vidStartTimer>
	}
 12a:	ff 91       	pop	r31
 12c:	ef 91       	pop	r30
 12e:	bf 91       	pop	r27
 130:	af 91       	pop	r26
 132:	9f 91       	pop	r25
 134:	8f 91       	pop	r24
 136:	7f 91       	pop	r23
 138:	6f 91       	pop	r22
 13a:	5f 91       	pop	r21
 13c:	4f 91       	pop	r20
 13e:	3f 91       	pop	r19
 140:	2f 91       	pop	r18
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0
 148:	1f 90       	pop	r1
 14a:	18 95       	reti

0000014c <Led_Init_vi>:
 * Output     : None
 * Author	  : Ahmed.Elsayed
 ********************************************/
void Led_Init_vi(void)
{
	Dio_vidSetPinDirection(CARS_RED_LED_PORT, CARS_RED_LED_PIN, Dio_Output);
 14c:	41 e0       	ldi	r20, 0x01	; 1
 14e:	61 e0       	ldi	r22, 0x01	; 1
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	0e 94 cd 01 	call	0x39a	; 0x39a <Dio_vidSetPinDirection>
	Dio_vidSetPinDirection(CARS_YELLOW_LED_PORT, CARS_YELLOW_LED_PIN, Dio_Output);
 156:	41 e0       	ldi	r20, 0x01	; 1
 158:	62 e0       	ldi	r22, 0x02	; 2
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	0e 94 cd 01 	call	0x39a	; 0x39a <Dio_vidSetPinDirection>
	Dio_vidSetPinDirection(CARS_GREEN_LED_PORT, CARS_GREEN_LED_PIN, Dio_Output);
 160:	41 e0       	ldi	r20, 0x01	; 1
 162:	63 e0       	ldi	r22, 0x03	; 3
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	0e 94 cd 01 	call	0x39a	; 0x39a <Dio_vidSetPinDirection>
	Dio_vidSetPinDirection(PEDESTRIANS_RED_LED_PORT, PEDESTRIANS_RED_LED_PIN, Dio_Output);
 16a:	41 e0       	ldi	r20, 0x01	; 1
 16c:	65 e0       	ldi	r22, 0x05	; 5
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	0e 94 cd 01 	call	0x39a	; 0x39a <Dio_vidSetPinDirection>
	Dio_vidSetPinDirection(PEDESTRIANS_YELLOW_LED_PORT, PEDESTRIANS_YELLOW_LED_PIN, Dio_Output);
 174:	41 e0       	ldi	r20, 0x01	; 1
 176:	66 e0       	ldi	r22, 0x06	; 6
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	0e 94 cd 01 	call	0x39a	; 0x39a <Dio_vidSetPinDirection>
	Dio_vidSetPinDirection(PEDESTRIANS_GREEN_LED_PORT, PEDESTRIANS_GREEN_LED_PIN, Dio_Output);
 17e:	41 e0       	ldi	r20, 0x01	; 1
 180:	67 e0       	ldi	r22, 0x07	; 7
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	0e 94 cd 01 	call	0x39a	; 0x39a <Dio_vidSetPinDirection>
 188:	08 95       	ret

0000018a <Led_ON_vi>:
 * Output     : None
 * Author	  : Ahmed.Elsayed
 ********************************************/
void Led_ON_vi(EN_LED_COLORS_t* LedColor)
{
	if(LedColor == CARS_RED)
 18a:	82 30       	cpi	r24, 0x02	; 2
 18c:	91 05       	cpc	r25, r1
 18e:	31 f4       	brne	.+12     	; 0x19c <Led_ON_vi+0x12>
	{
		Dio_vidWritePin(CARS_RED_LED_PORT, CARS_RED_LED_PIN, Dio_High);	
 190:	41 e0       	ldi	r20, 0x01	; 1
 192:	61 e0       	ldi	r22, 0x01	; 1
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	0e 94 44 02 	call	0x488	; 0x488 <Dio_vidWritePin>
 19a:	08 95       	ret
	}
	else if(LedColor == CARS_YELLOW)
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	91 05       	cpc	r25, r1
 1a0:	31 f4       	brne	.+12     	; 0x1ae <Led_ON_vi+0x24>
	{
		Dio_vidWritePin(CARS_YELLOW_LED_PORT, CARS_YELLOW_LED_PIN, Dio_High);
 1a2:	41 e0       	ldi	r20, 0x01	; 1
 1a4:	62 e0       	ldi	r22, 0x02	; 2
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	0e 94 44 02 	call	0x488	; 0x488 <Dio_vidWritePin>
 1ac:	08 95       	ret
	}
	else if(LedColor == CARS_GREEN)
 1ae:	00 97       	sbiw	r24, 0x00	; 0
 1b0:	31 f4       	brne	.+12     	; 0x1be <Led_ON_vi+0x34>
	{
		Dio_vidWritePin(CARS_GREEN_LED_PORT, CARS_GREEN_LED_PIN, Dio_High);
 1b2:	41 e0       	ldi	r20, 0x01	; 1
 1b4:	63 e0       	ldi	r22, 0x03	; 3
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	0e 94 44 02 	call	0x488	; 0x488 <Dio_vidWritePin>
 1bc:	08 95       	ret
	}		
	else if(LedColor == PEDESTRIANS_RED)
 1be:	85 30       	cpi	r24, 0x05	; 5
 1c0:	91 05       	cpc	r25, r1
 1c2:	31 f4       	brne	.+12     	; 0x1d0 <Led_ON_vi+0x46>
	{
		Dio_vidWritePin(PEDESTRIANS_RED_LED_PORT, PEDESTRIANS_RED_LED_PIN, Dio_High);
 1c4:	41 e0       	ldi	r20, 0x01	; 1
 1c6:	65 e0       	ldi	r22, 0x05	; 5
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	0e 94 44 02 	call	0x488	; 0x488 <Dio_vidWritePin>
 1ce:	08 95       	ret
	}
	else if(LedColor == PEDESTRIANS_YELLOW)
 1d0:	84 30       	cpi	r24, 0x04	; 4
 1d2:	91 05       	cpc	r25, r1
 1d4:	31 f4       	brne	.+12     	; 0x1e2 <Led_ON_vi+0x58>
	{
		Dio_vidWritePin(PEDESTRIANS_YELLOW_LED_PORT, PEDESTRIANS_YELLOW_LED_PIN, Dio_High);
 1d6:	41 e0       	ldi	r20, 0x01	; 1
 1d8:	66 e0       	ldi	r22, 0x06	; 6
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	0e 94 44 02 	call	0x488	; 0x488 <Dio_vidWritePin>
 1e0:	08 95       	ret
	}
	else if(LedColor == PEDESTRIANS_GREEN)
 1e2:	03 97       	sbiw	r24, 0x03	; 3
 1e4:	29 f4       	brne	.+10     	; 0x1f0 <Led_ON_vi+0x66>
	{
		Dio_vidWritePin(PEDESTRIANS_GREEN_LED_PORT, PEDESTRIANS_GREEN_LED_PIN, Dio_High);
 1e6:	41 e0       	ldi	r20, 0x01	; 1
 1e8:	67 e0       	ldi	r22, 0x07	; 7
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	0e 94 44 02 	call	0x488	; 0x488 <Dio_vidWritePin>
 1f0:	08 95       	ret

000001f2 <Led_OFF_vi>:
 * Output     : None
 * Author	  : Ahmed.Elsayed
 ********************************************/
void Led_OFF_vi(EN_LED_COLORS_t* LedColor)
{
	if(LedColor == CARS_RED)
 1f2:	82 30       	cpi	r24, 0x02	; 2
 1f4:	91 05       	cpc	r25, r1
 1f6:	31 f4       	brne	.+12     	; 0x204 <Led_OFF_vi+0x12>
	{
		Dio_vidWritePin(CARS_RED_LED_PORT, CARS_RED_LED_PIN, Dio_Low);
 1f8:	40 e0       	ldi	r20, 0x00	; 0
 1fa:	61 e0       	ldi	r22, 0x01	; 1
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	0e 94 44 02 	call	0x488	; 0x488 <Dio_vidWritePin>
 202:	08 95       	ret
	}
	else if(LedColor == CARS_YELLOW)
 204:	81 30       	cpi	r24, 0x01	; 1
 206:	91 05       	cpc	r25, r1
 208:	31 f4       	brne	.+12     	; 0x216 <Led_OFF_vi+0x24>
	{
		Dio_vidWritePin(CARS_YELLOW_LED_PORT, CARS_YELLOW_LED_PIN, Dio_Low);
 20a:	40 e0       	ldi	r20, 0x00	; 0
 20c:	62 e0       	ldi	r22, 0x02	; 2
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	0e 94 44 02 	call	0x488	; 0x488 <Dio_vidWritePin>
 214:	08 95       	ret
	}
	else if(LedColor == CARS_GREEN)
 216:	00 97       	sbiw	r24, 0x00	; 0
 218:	31 f4       	brne	.+12     	; 0x226 <Led_OFF_vi+0x34>
	{
		Dio_vidWritePin(CARS_GREEN_LED_PORT, CARS_GREEN_LED_PIN, Dio_Low);
 21a:	40 e0       	ldi	r20, 0x00	; 0
 21c:	63 e0       	ldi	r22, 0x03	; 3
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	0e 94 44 02 	call	0x488	; 0x488 <Dio_vidWritePin>
 224:	08 95       	ret
	}
	else if(LedColor == PEDESTRIANS_RED)
 226:	85 30       	cpi	r24, 0x05	; 5
 228:	91 05       	cpc	r25, r1
 22a:	31 f4       	brne	.+12     	; 0x238 <Led_OFF_vi+0x46>
	{
		Dio_vidWritePin(PEDESTRIANS_RED_LED_PORT, PEDESTRIANS_RED_LED_PIN, Dio_Low);
 22c:	40 e0       	ldi	r20, 0x00	; 0
 22e:	65 e0       	ldi	r22, 0x05	; 5
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	0e 94 44 02 	call	0x488	; 0x488 <Dio_vidWritePin>
 236:	08 95       	ret
	}
	else if(LedColor == PEDESTRIANS_YELLOW)
 238:	84 30       	cpi	r24, 0x04	; 4
 23a:	91 05       	cpc	r25, r1
 23c:	31 f4       	brne	.+12     	; 0x24a <Led_OFF_vi+0x58>
	{
		Dio_vidWritePin(PEDESTRIANS_YELLOW_LED_PORT, PEDESTRIANS_YELLOW_LED_PIN, Dio_Low);
 23e:	40 e0       	ldi	r20, 0x00	; 0
 240:	66 e0       	ldi	r22, 0x06	; 6
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	0e 94 44 02 	call	0x488	; 0x488 <Dio_vidWritePin>
 248:	08 95       	ret
	}
	else if(LedColor == PEDESTRIANS_GREEN)
 24a:	03 97       	sbiw	r24, 0x03	; 3
 24c:	29 f4       	brne	.+10     	; 0x258 <Led_OFF_vi+0x66>
	{
		Dio_vidWritePin(PEDESTRIANS_GREEN_LED_PORT, PEDESTRIANS_GREEN_LED_PIN, Dio_Low);
 24e:	40 e0       	ldi	r20, 0x00	; 0
 250:	67 e0       	ldi	r22, 0x07	; 7
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	0e 94 44 02 	call	0x488	; 0x488 <Dio_vidWritePin>
 258:	08 95       	ret

0000025a <Led_Yellow_Blink_vi>:
 * Input      : CarsLedColor , PedestrainsLedColor
 * Output     : None
 * Author	  : Ahmed.Elsayed
 ********************************************/
void Led_Yellow_Blink_vi(EN_LED_COLORS_t* CarsLedColor, EN_LED_COLORS_t* PedestrainsLedColor)
{
 25a:	ef 92       	push	r14
 25c:	ff 92       	push	r15
 25e:	0f 93       	push	r16
 260:	1f 93       	push	r17
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
 266:	7c 01       	movw	r14, r24
 268:	8b 01       	movw	r16, r22
	uint8 i;
	uint8 ToggleFlag = 0;
	TMR0_vidInit();
 26a:	0e 94 b9 02 	call	0x572	; 0x572 <TMR0_vidInit>
 * Author	  : Ahmed.Elsayed
 ********************************************/
void Led_Yellow_Blink_vi(EN_LED_COLORS_t* CarsLedColor, EN_LED_COLORS_t* PedestrainsLedColor)
{
	uint8 i;
	uint8 ToggleFlag = 0;
 26e:	d0 e0       	ldi	r29, 0x00	; 0
	TMR0_vidInit();
	for(i=0 ; i<5 ; i++)
 270:	c0 e0       	ldi	r28, 0x00	; 0
 272:	34 c0       	rjmp	.+104    	; 0x2dc <Led_Yellow_Blink_vi+0x82>
	{
		TMR0_vidSetTimer(0x00);
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	0e 94 cc 02 	call	0x598	; 0x598 <TMR0_vidSetTimer>
		if(ToggleFlag == 0)
 27a:	d1 11       	cpse	r29, r1
 27c:	08 c0       	rjmp	.+16     	; 0x28e <Led_Yellow_Blink_vi+0x34>
		{
			Led_ON_vi(CarsLedColor);
 27e:	c7 01       	movw	r24, r14
 280:	0e 94 c5 00 	call	0x18a	; 0x18a <Led_ON_vi>
			Led_ON_vi(PedestrainsLedColor);
 284:	c8 01       	movw	r24, r16
 286:	0e 94 c5 00 	call	0x18a	; 0x18a <Led_ON_vi>
			ToggleFlag = 1;
 28a:	d1 e0       	ldi	r29, 0x01	; 1
 28c:	09 c0       	rjmp	.+18     	; 0x2a0 <Led_Yellow_Blink_vi+0x46>
		}
		else if(ToggleFlag == 1)
 28e:	d1 30       	cpi	r29, 0x01	; 1
 290:	39 f4       	brne	.+14     	; 0x2a0 <Led_Yellow_Blink_vi+0x46>
		{
			Led_OFF_vi(CarsLedColor);
 292:	c7 01       	movw	r24, r14
 294:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <Led_OFF_vi>
			Led_OFF_vi(PedestrainsLedColor);
 298:	c8 01       	movw	r24, r16
 29a:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <Led_OFF_vi>
			ToggleFlag = 0;
 29e:	d0 e0       	ldi	r29, 0x00	; 0
		}
		/*Delay 1sec*/	
		/*Start Timer0 With Prescalar 1024*/
		TMR0_vidStartTimer(1024);	
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	94 e0       	ldi	r25, 0x04	; 4
 2a4:	0e 94 ce 02 	call	0x59c	; 0x59c <TMR0_vidStartTimer>
		while (overflowCounter < NUMBER_OF_OVERFLOWS_TIM0_1SEC)
 2a8:	0b c0       	rjmp	.+22     	; 0x2c0 <Led_Yellow_Blink_vi+0x66>
		{
			TMR0_vidWaitOverflowFlagTimer();
 2aa:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <TMR0_vidWaitOverflowFlagTimer>
			overflowCounter++;
 2ae:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <overflowCounter>
 2b2:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <overflowCounter+0x1>
 2b6:	01 96       	adiw	r24, 0x01	; 1
 2b8:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <overflowCounter+0x1>
 2bc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <overflowCounter>
			ToggleFlag = 0;
		}
		/*Delay 1sec*/	
		/*Start Timer0 With Prescalar 1024*/
		TMR0_vidStartTimer(1024);	
		while (overflowCounter < NUMBER_OF_OVERFLOWS_TIM0_1SEC)
 2c0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <overflowCounter>
 2c4:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <overflowCounter+0x1>
 2c8:	88 3e       	cpi	r24, 0xE8	; 232
 2ca:	93 40       	sbci	r25, 0x03	; 3
 2cc:	70 f3       	brcs	.-36     	; 0x2aa <Led_Yellow_Blink_vi+0x50>
		{
			TMR0_vidWaitOverflowFlagTimer();
			overflowCounter++;
		}
		overflowCounter = 0;
 2ce:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <overflowCounter+0x1>
 2d2:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <overflowCounter>
		/*Timer0 stop*/
		TMR0_vidStopTimer();				
 2d6:	0e 94 f7 02 	call	0x5ee	; 0x5ee <TMR0_vidStopTimer>
void Led_Yellow_Blink_vi(EN_LED_COLORS_t* CarsLedColor, EN_LED_COLORS_t* PedestrainsLedColor)
{
	uint8 i;
	uint8 ToggleFlag = 0;
	TMR0_vidInit();
	for(i=0 ; i<5 ; i++)
 2da:	cf 5f       	subi	r28, 0xFF	; 255
 2dc:	c5 30       	cpi	r28, 0x05	; 5
 2de:	50 f2       	brcs	.-108    	; 0x274 <Led_Yellow_Blink_vi+0x1a>
		}
		overflowCounter = 0;
		/*Timer0 stop*/
		TMR0_vidStopTimer();				
	}
	Led_OFF_vi(CarsLedColor);
 2e0:	c7 01       	movw	r24, r14
 2e2:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <Led_OFF_vi>
	Led_OFF_vi(PedestrainsLedColor);
 2e6:	c8 01       	movw	r24, r16
 2e8:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <Led_OFF_vi>
}
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	1f 91       	pop	r17
 2f2:	0f 91       	pop	r16
 2f4:	ff 90       	pop	r15
 2f6:	ef 90       	pop	r14
 2f8:	08 95       	ret

000002fa <vidLed_ON_5Sec>:
 * Input      : CarsLedColor , PedestrainsLedColor
 * Output     : None
 * Author	  : Ahmed.Elsayed
 ********************************************/
void vidLed_ON_5Sec(EN_LED_COLORS_t* CarsLedColor, EN_LED_COLORS_t* PedestrainsLedColor)
{
 2fa:	0f 93       	push	r16
 2fc:	1f 93       	push	r17
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	8c 01       	movw	r16, r24
 304:	eb 01       	movw	r28, r22
		/*Set time for 5 second */
		TMR0_vidInit();
 306:	0e 94 b9 02 	call	0x572	; 0x572 <TMR0_vidInit>
		TMR0_vidSetTimer(0x00);
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	0e 94 cc 02 	call	0x598	; 0x598 <TMR0_vidSetTimer>
		Led_ON_vi(CarsLedColor);
 310:	c8 01       	movw	r24, r16
 312:	0e 94 c5 00 	call	0x18a	; 0x18a <Led_ON_vi>
		Led_ON_vi(PedestrainsLedColor);
 316:	ce 01       	movw	r24, r28
 318:	0e 94 c5 00 	call	0x18a	; 0x18a <Led_ON_vi>
		TMR0_vidStartTimer(1024);
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	94 e0       	ldi	r25, 0x04	; 4
 320:	0e 94 ce 02 	call	0x59c	; 0x59c <TMR0_vidStartTimer>
		while (overflowCounter < NUMBER_OF_OVERFLOWS_TIM0_5SEC)
 324:	0b c0       	rjmp	.+22     	; 0x33c <vidLed_ON_5Sec+0x42>
		{
			TMR0_vidWaitOverflowFlagTimer();
 326:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <TMR0_vidWaitOverflowFlagTimer>
			overflowCounter++;
 32a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <overflowCounter>
 32e:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <overflowCounter+0x1>
 332:	01 96       	adiw	r24, 0x01	; 1
 334:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <overflowCounter+0x1>
 338:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <overflowCounter>
		TMR0_vidInit();
		TMR0_vidSetTimer(0x00);
		Led_ON_vi(CarsLedColor);
		Led_ON_vi(PedestrainsLedColor);
		TMR0_vidStartTimer(1024);
		while (overflowCounter < NUMBER_OF_OVERFLOWS_TIM0_5SEC)
 33c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <overflowCounter>
 340:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <overflowCounter+0x1>
 344:	88 38       	cpi	r24, 0x88	; 136
 346:	93 41       	sbci	r25, 0x13	; 19
 348:	70 f3       	brcs	.-36     	; 0x326 <vidLed_ON_5Sec+0x2c>
		{
			TMR0_vidWaitOverflowFlagTimer();
			overflowCounter++;
		}
		overflowCounter = 0;
 34a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <overflowCounter+0x1>
 34e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <overflowCounter>
		/*Timer0 stop*/
		TMR0_vidStopTimer();
 352:	0e 94 f7 02 	call	0x5ee	; 0x5ee <TMR0_vidStopTimer>
		Led_OFF_vi(CarsLedColor);
 356:	c8 01       	movw	r24, r16
 358:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <Led_OFF_vi>
		Led_OFF_vi(PedestrainsLedColor);
 35c:	ce 01       	movw	r24, r28
 35e:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <Led_OFF_vi>
 362:	df 91       	pop	r29
 364:	cf 91       	pop	r28
 366:	1f 91       	pop	r17
 368:	0f 91       	pop	r16
 36a:	08 95       	ret

0000036c <vidInit_pushButton>:
 * Author	  : Ahmed.Elsayed
 ********************************************/
void vidInit_pushButton(uint8 buttonPort, uint8 buttonPin)
{
	/*Set button pin to input*/
	Dio_vidSetPinDirection(buttonPort, buttonPin, Dio_Input);
 36c:	40 e0       	ldi	r20, 0x00	; 0
 36e:	0e 94 cd 01 	call	0x39a	; 0x39a <Dio_vidSetPinDirection>
	/*Enable Global Interrupt*/
	sei();
 372:	78 94       	sei
	/*Use rising edge for external interrupt*/
	Set_Bit(MCUCR, ISC00);
 374:	85 b7       	in	r24, 0x35	; 53
 376:	81 60       	ori	r24, 0x01	; 1
 378:	85 bf       	out	0x35, r24	; 53
	Set_Bit(MCUCR, ISC01);
 37a:	85 b7       	in	r24, 0x35	; 53
 37c:	82 60       	ori	r24, 0x02	; 2
 37e:	85 bf       	out	0x35, r24	; 53
	/*Enable external INT0*/
	Set_Bit(GICR, INT0);
 380:	8b b7       	in	r24, 0x3b	; 59
 382:	80 64       	ori	r24, 0x40	; 64
 384:	8b bf       	out	0x3b, r24	; 59
 386:	08 95       	ret

00000388 <main>:


int main(void)
{
    /* Initialize Leds */
	Led_Init_vi();
 388:	0e 94 a6 00 	call	0x14c	; 0x14c <Led_Init_vi>
	/* Initialize PushButton as INT0 */
	vidInit_pushButton(PUSHBUTTON_PORT, PUSHBUTTON_PIN);
 38c:	62 e0       	ldi	r22, 0x02	; 2
 38e:	83 e0       	ldi	r24, 0x03	; 3
 390:	0e 94 b6 01 	call	0x36c	; 0x36c <vidInit_pushButton>
    while (1) 
    {
		vidTrafficLights();
 394:	0e 94 3e 00 	call	0x7c	; 0x7c <vidTrafficLights>
 398:	fd cf       	rjmp	.-6      	; 0x394 <main+0xc>

0000039a <Dio_vidSetPinDirection>:
		{
			DDRD = 0x00;
		}
		else if(Direction == Dio_Output)
		{
			DDRD = 0xFF;
 39a:	81 30       	cpi	r24, 0x01	; 1
 39c:	19 f1       	breq	.+70     	; 0x3e4 <Dio_vidSetPinDirection+0x4a>
 39e:	30 f0       	brcs	.+12     	; 0x3ac <Dio_vidSetPinDirection+0x12>
 3a0:	82 30       	cpi	r24, 0x02	; 2
 3a2:	e1 f1       	breq	.+120    	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 3a4:	83 30       	cpi	r24, 0x03	; 3
 3a6:	09 f4       	brne	.+2      	; 0x3aa <Dio_vidSetPinDirection+0x10>
 3a8:	54 c0       	rjmp	.+168    	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 3aa:	08 95       	ret
 3ac:	41 11       	cpse	r20, r1
 3ae:	0c c0       	rjmp	.+24     	; 0x3c8 <Dio_vidSetPinDirection+0x2e>
 3b0:	2a b3       	in	r18, 0x1a	; 26
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <Dio_vidSetPinDirection+0x22>
 3b8:	88 0f       	add	r24, r24
 3ba:	99 1f       	adc	r25, r25
 3bc:	6a 95       	dec	r22
 3be:	e2 f7       	brpl	.-8      	; 0x3b8 <Dio_vidSetPinDirection+0x1e>
 3c0:	80 95       	com	r24
 3c2:	82 23       	and	r24, r18
 3c4:	8a bb       	out	0x1a, r24	; 26
 3c6:	08 95       	ret
 3c8:	41 30       	cpi	r20, 0x01	; 1
 3ca:	09 f0       	breq	.+2      	; 0x3ce <Dio_vidSetPinDirection+0x34>
 3cc:	5c c0       	rjmp	.+184    	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 3ce:	2a b3       	in	r18, 0x1a	; 26
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <Dio_vidSetPinDirection+0x40>
 3d6:	88 0f       	add	r24, r24
 3d8:	99 1f       	adc	r25, r25
 3da:	6a 95       	dec	r22
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <Dio_vidSetPinDirection+0x3c>
 3de:	82 2b       	or	r24, r18
 3e0:	8a bb       	out	0x1a, r24	; 26
 3e2:	08 95       	ret
 3e4:	41 11       	cpse	r20, r1
 3e6:	0c c0       	rjmp	.+24     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3e8:	27 b3       	in	r18, 0x17	; 23
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <Dio_vidSetPinDirection+0x5a>
 3f0:	88 0f       	add	r24, r24
 3f2:	99 1f       	adc	r25, r25
 3f4:	6a 95       	dec	r22
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <Dio_vidSetPinDirection+0x56>
 3f8:	80 95       	com	r24
 3fa:	82 23       	and	r24, r18
 3fc:	87 bb       	out	0x17, r24	; 23
 3fe:	08 95       	ret
 400:	41 30       	cpi	r20, 0x01	; 1
 402:	09 f0       	breq	.+2      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 404:	40 c0       	rjmp	.+128    	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 406:	27 b3       	in	r18, 0x17	; 23
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	02 c0       	rjmp	.+4      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 40e:	88 0f       	add	r24, r24
 410:	99 1f       	adc	r25, r25
 412:	6a 95       	dec	r22
 414:	e2 f7       	brpl	.-8      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 416:	82 2b       	or	r24, r18
 418:	87 bb       	out	0x17, r24	; 23
 41a:	08 95       	ret
 41c:	41 11       	cpse	r20, r1
 41e:	0c c0       	rjmp	.+24     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 420:	24 b3       	in	r18, 0x14	; 20
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	02 c0       	rjmp	.+4      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 428:	88 0f       	add	r24, r24
 42a:	99 1f       	adc	r25, r25
 42c:	6a 95       	dec	r22
 42e:	e2 f7       	brpl	.-8      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 430:	80 95       	com	r24
 432:	82 23       	and	r24, r18
 434:	84 bb       	out	0x14, r24	; 20
 436:	08 95       	ret
 438:	41 30       	cpi	r20, 0x01	; 1
 43a:	29 f5       	brne	.+74     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 43c:	24 b3       	in	r18, 0x14	; 20
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	02 c0       	rjmp	.+4      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 444:	88 0f       	add	r24, r24
 446:	99 1f       	adc	r25, r25
 448:	6a 95       	dec	r22
 44a:	e2 f7       	brpl	.-8      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 44c:	82 2b       	or	r24, r18
 44e:	84 bb       	out	0x14, r24	; 20
 450:	08 95       	ret
 452:	41 11       	cpse	r20, r1
 454:	0c c0       	rjmp	.+24     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 456:	21 b3       	in	r18, 0x11	; 17
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	02 c0       	rjmp	.+4      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 45e:	88 0f       	add	r24, r24
 460:	99 1f       	adc	r25, r25
 462:	6a 95       	dec	r22
 464:	e2 f7       	brpl	.-8      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 466:	80 95       	com	r24
 468:	82 23       	and	r24, r18
 46a:	81 bb       	out	0x11, r24	; 17
 46c:	08 95       	ret
 46e:	41 30       	cpi	r20, 0x01	; 1
 470:	51 f4       	brne	.+20     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 472:	21 b3       	in	r18, 0x11	; 17
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	02 c0       	rjmp	.+4      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 47a:	88 0f       	add	r24, r24
 47c:	99 1f       	adc	r25, r25
 47e:	6a 95       	dec	r22
 480:	e2 f7       	brpl	.-8      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 482:	82 2b       	or	r24, r18
 484:	81 bb       	out	0x11, r24	; 17
 486:	08 95       	ret

00000488 <Dio_vidWritePin>:
 * Output     : None
 * Author	  : Ahmed.Elsayed
 ********************************************/
void Dio_vidWritePin(enuPortType Port, uint8 Pin, enuPinState State)
{
	switch(Port)
 488:	81 30       	cpi	r24, 0x01	; 1
 48a:	11 f1       	breq	.+68     	; 0x4d0 <Dio_vidWritePin+0x48>
 48c:	30 f0       	brcs	.+12     	; 0x49a <Dio_vidWritePin+0x12>
 48e:	82 30       	cpi	r24, 0x02	; 2
 490:	d1 f1       	breq	.+116    	; 0x506 <Dio_vidWritePin+0x7e>
 492:	83 30       	cpi	r24, 0x03	; 3
 494:	09 f4       	brne	.+2      	; 0x498 <Dio_vidWritePin+0x10>
 496:	52 c0       	rjmp	.+164    	; 0x53c <Dio_vidWritePin+0xb4>
 498:	08 95       	ret
	{
		case Dio_PORTA:
		if(State == Dio_High)
 49a:	41 30       	cpi	r20, 0x01	; 1
 49c:	59 f4       	brne	.+22     	; 0x4b4 <Dio_vidWritePin+0x2c>
		{
			Set_Bit(PORTA, Pin);
 49e:	2b b3       	in	r18, 0x1b	; 27
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	02 c0       	rjmp	.+4      	; 0x4aa <Dio_vidWritePin+0x22>
 4a6:	88 0f       	add	r24, r24
 4a8:	99 1f       	adc	r25, r25
 4aa:	6a 95       	dec	r22
 4ac:	e2 f7       	brpl	.-8      	; 0x4a6 <Dio_vidWritePin+0x1e>
 4ae:	82 2b       	or	r24, r18
 4b0:	8b bb       	out	0x1b, r24	; 27
 4b2:	08 95       	ret
		}
		else if(State == Dio_Low)
 4b4:	41 11       	cpse	r20, r1
 4b6:	5c c0       	rjmp	.+184    	; 0x570 <Dio_vidWritePin+0xe8>
		{
			Clear_Bit(PORTA, Pin);
 4b8:	2b b3       	in	r18, 0x1b	; 27
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <Dio_vidWritePin+0x3c>
 4c0:	88 0f       	add	r24, r24
 4c2:	99 1f       	adc	r25, r25
 4c4:	6a 95       	dec	r22
 4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <Dio_vidWritePin+0x38>
 4c8:	80 95       	com	r24
 4ca:	82 23       	and	r24, r18
 4cc:	8b bb       	out	0x1b, r24	; 27
 4ce:	08 95       	ret
		}
		break;
		case Dio_PORTB:
		if(State == Dio_High)
 4d0:	41 30       	cpi	r20, 0x01	; 1
 4d2:	59 f4       	brne	.+22     	; 0x4ea <Dio_vidWritePin+0x62>
		{
			Set_Bit(PORTB, Pin);
 4d4:	28 b3       	in	r18, 0x18	; 24
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <Dio_vidWritePin+0x58>
 4dc:	88 0f       	add	r24, r24
 4de:	99 1f       	adc	r25, r25
 4e0:	6a 95       	dec	r22
 4e2:	e2 f7       	brpl	.-8      	; 0x4dc <Dio_vidWritePin+0x54>
 4e4:	82 2b       	or	r24, r18
 4e6:	88 bb       	out	0x18, r24	; 24
 4e8:	08 95       	ret
		}
		else if(State == Dio_Low)
 4ea:	41 11       	cpse	r20, r1
 4ec:	41 c0       	rjmp	.+130    	; 0x570 <Dio_vidWritePin+0xe8>
		{
			Clear_Bit(PORTB, Pin);
 4ee:	28 b3       	in	r18, 0x18	; 24
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	02 c0       	rjmp	.+4      	; 0x4fa <Dio_vidWritePin+0x72>
 4f6:	88 0f       	add	r24, r24
 4f8:	99 1f       	adc	r25, r25
 4fa:	6a 95       	dec	r22
 4fc:	e2 f7       	brpl	.-8      	; 0x4f6 <Dio_vidWritePin+0x6e>
 4fe:	80 95       	com	r24
 500:	82 23       	and	r24, r18
 502:	88 bb       	out	0x18, r24	; 24
 504:	08 95       	ret
		}
		break;
		case Dio_PORTC:
		if(State == Dio_High)
 506:	41 30       	cpi	r20, 0x01	; 1
 508:	59 f4       	brne	.+22     	; 0x520 <Dio_vidWritePin+0x98>
		{
			Set_Bit(PORTC, Pin);
 50a:	25 b3       	in	r18, 0x15	; 21
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	02 c0       	rjmp	.+4      	; 0x516 <Dio_vidWritePin+0x8e>
 512:	88 0f       	add	r24, r24
 514:	99 1f       	adc	r25, r25
 516:	6a 95       	dec	r22
 518:	e2 f7       	brpl	.-8      	; 0x512 <Dio_vidWritePin+0x8a>
 51a:	82 2b       	or	r24, r18
 51c:	85 bb       	out	0x15, r24	; 21
 51e:	08 95       	ret
		}
		else if(State == Dio_Low)
 520:	41 11       	cpse	r20, r1
 522:	26 c0       	rjmp	.+76     	; 0x570 <Dio_vidWritePin+0xe8>
		{
			Clear_Bit(PORTC, Pin);
 524:	25 b3       	in	r18, 0x15	; 21
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	02 c0       	rjmp	.+4      	; 0x530 <Dio_vidWritePin+0xa8>
 52c:	88 0f       	add	r24, r24
 52e:	99 1f       	adc	r25, r25
 530:	6a 95       	dec	r22
 532:	e2 f7       	brpl	.-8      	; 0x52c <Dio_vidWritePin+0xa4>
 534:	80 95       	com	r24
 536:	82 23       	and	r24, r18
 538:	85 bb       	out	0x15, r24	; 21
 53a:	08 95       	ret
		}
		break;

		case Dio_PORTD:
		if(State == Dio_High)
 53c:	41 30       	cpi	r20, 0x01	; 1
 53e:	59 f4       	brne	.+22     	; 0x556 <Dio_vidWritePin+0xce>
		{
			Set_Bit(PORTD, Pin);
 540:	22 b3       	in	r18, 0x12	; 18
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	02 c0       	rjmp	.+4      	; 0x54c <Dio_vidWritePin+0xc4>
 548:	88 0f       	add	r24, r24
 54a:	99 1f       	adc	r25, r25
 54c:	6a 95       	dec	r22
 54e:	e2 f7       	brpl	.-8      	; 0x548 <Dio_vidWritePin+0xc0>
 550:	82 2b       	or	r24, r18
 552:	82 bb       	out	0x12, r24	; 18
 554:	08 95       	ret
		}
		else if(State == Dio_Low)
 556:	41 11       	cpse	r20, r1
 558:	0b c0       	rjmp	.+22     	; 0x570 <Dio_vidWritePin+0xe8>
		{
			Clear_Bit(PORTD, Pin);
 55a:	22 b3       	in	r18, 0x12	; 18
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	02 c0       	rjmp	.+4      	; 0x566 <Dio_vidWritePin+0xde>
 562:	88 0f       	add	r24, r24
 564:	99 1f       	adc	r25, r25
 566:	6a 95       	dec	r22
 568:	e2 f7       	brpl	.-8      	; 0x562 <Dio_vidWritePin+0xda>
 56a:	80 95       	com	r24
 56c:	82 23       	and	r24, r18
 56e:	82 bb       	out	0x12, r24	; 18
 570:	08 95       	ret

00000572 <TMR0_vidInit>:
 * Author	  : Ahmed.Elsayed
 ********************************************/
uint8 TMR0_u8GetTimer(void)
{
	return TCNT0;
}
 572:	83 b7       	in	r24, 0x33	; 51
 574:	87 7f       	andi	r24, 0xF7	; 247
 576:	83 bf       	out	0x33, r24	; 51
 578:	83 b7       	in	r24, 0x33	; 51
 57a:	8f 7b       	andi	r24, 0xBF	; 191
 57c:	83 bf       	out	0x33, r24	; 51
 57e:	83 b7       	in	r24, 0x33	; 51
 580:	8f 7e       	andi	r24, 0xEF	; 239
 582:	83 bf       	out	0x33, r24	; 51
 584:	83 b7       	in	r24, 0x33	; 51
 586:	8f 7d       	andi	r24, 0xDF	; 223
 588:	83 bf       	out	0x33, r24	; 51
 58a:	82 b7       	in	r24, 0x32	; 50
 58c:	8e 7f       	andi	r24, 0xFE	; 254
 58e:	82 bf       	out	0x32, r24	; 50
 590:	89 b7       	in	r24, 0x39	; 57
 592:	81 60       	ori	r24, 0x01	; 1
 594:	89 bf       	out	0x39, r24	; 57
 596:	08 95       	ret

00000598 <TMR0_vidSetTimer>:
 598:	82 bf       	out	0x32, r24	; 50
 59a:	08 95       	ret

0000059c <TMR0_vidStartTimer>:
 * Output     : None
 * Author	  : Ahmed.Elsayed
 ********************************************/
void TMR0_vidStartTimer(uint16 preScalar)
{
	if(preScalar == 0)
 59c:	00 97       	sbiw	r24, 0x00	; 0
 59e:	21 f4       	brne	.+8      	; 0x5a8 <TMR0_vidStartTimer+0xc>
	{
		Set_Bit(TCCR0, CS00);
 5a0:	83 b7       	in	r24, 0x33	; 51
 5a2:	81 60       	ori	r24, 0x01	; 1
 5a4:	83 bf       	out	0x33, r24	; 51
 5a6:	08 95       	ret
	}
	else if(preScalar == 8)
 5a8:	88 30       	cpi	r24, 0x08	; 8
 5aa:	91 05       	cpc	r25, r1
 5ac:	21 f4       	brne	.+8      	; 0x5b6 <TMR0_vidStartTimer+0x1a>
	{
		Set_Bit(TCCR0, CS01);
 5ae:	83 b7       	in	r24, 0x33	; 51
 5b0:	82 60       	ori	r24, 0x02	; 2
 5b2:	83 bf       	out	0x33, r24	; 51
 5b4:	08 95       	ret
	}
	else if(preScalar == 64)
 5b6:	80 34       	cpi	r24, 0x40	; 64
 5b8:	91 05       	cpc	r25, r1
 5ba:	39 f4       	brne	.+14     	; 0x5ca <TMR0_vidStartTimer+0x2e>
	{
		Set_Bit(TCCR0, CS00);
 5bc:	83 b7       	in	r24, 0x33	; 51
 5be:	81 60       	ori	r24, 0x01	; 1
 5c0:	83 bf       	out	0x33, r24	; 51
		Set_Bit(TCCR0, CS01);
 5c2:	83 b7       	in	r24, 0x33	; 51
 5c4:	82 60       	ori	r24, 0x02	; 2
 5c6:	83 bf       	out	0x33, r24	; 51
 5c8:	08 95       	ret
	}
	else if(preScalar == 256)
 5ca:	81 15       	cp	r24, r1
 5cc:	21 e0       	ldi	r18, 0x01	; 1
 5ce:	92 07       	cpc	r25, r18
 5d0:	21 f4       	brne	.+8      	; 0x5da <TMR0_vidStartTimer+0x3e>
	{
		Set_Bit(TCCR0, CS02);
 5d2:	83 b7       	in	r24, 0x33	; 51
 5d4:	84 60       	ori	r24, 0x04	; 4
 5d6:	83 bf       	out	0x33, r24	; 51
 5d8:	08 95       	ret
	}
	else if(preScalar == 1024)
 5da:	81 15       	cp	r24, r1
 5dc:	94 40       	sbci	r25, 0x04	; 4
 5de:	31 f4       	brne	.+12     	; 0x5ec <TMR0_vidStartTimer+0x50>
	{
		Set_Bit(TCCR0, CS00);
 5e0:	83 b7       	in	r24, 0x33	; 51
 5e2:	81 60       	ori	r24, 0x01	; 1
 5e4:	83 bf       	out	0x33, r24	; 51
		Set_Bit(TCCR0, CS02);
 5e6:	83 b7       	in	r24, 0x33	; 51
 5e8:	84 60       	ori	r24, 0x04	; 4
 5ea:	83 bf       	out	0x33, r24	; 51
 5ec:	08 95       	ret

000005ee <TMR0_vidStopTimer>:
 * Output     : None
 * Author	  : Ahmed.Elsayed
 ********************************************/
void TMR0_vidStopTimer(void)
{
	TCCR0 = 0x00;
 5ee:	13 be       	out	0x33, r1	; 51
 5f0:	08 95       	ret

000005f2 <TMR0_vidWaitOverflowFlagTimer>:
 * Output     : None
 * Author	  : Ahmed.Elsayed
 ********************************************/
void TMR0_vidWaitOverflowFlagTimer(void)
{
	while (Get_Bit(TIFR, 0) == 0);
 5f2:	02 b6       	in	r0, 0x32	; 50
 5f4:	00 fe       	sbrs	r0, 0
 5f6:	fd cf       	rjmp	.-6      	; 0x5f2 <TMR0_vidWaitOverflowFlagTimer>
	Clear_Bit(TIFR, 0);	
 5f8:	82 b7       	in	r24, 0x32	; 50
 5fa:	8e 7f       	andi	r24, 0xFE	; 254
 5fc:	82 bf       	out	0x32, r24	; 50
 5fe:	08 95       	ret

00000600 <_exit>:
 600:	f8 94       	cli

00000602 <__stop_program>:
 602:	ff cf       	rjmp	.-2      	; 0x602 <__stop_program>
